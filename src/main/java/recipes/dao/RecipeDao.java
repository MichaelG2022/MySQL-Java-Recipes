package recipes.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalTime;
import java.util.List;
import provided.util.DaoBase;
import recipes.entity.Recipe;
import recipes.exception.DbException;

public class RecipeDao extends DaoBase {

	// constants
	private static final String CATEOGRY_TABLE = "category";
	private static final String INGREDIENT_TABLE = "ingredient";
	private static final String RECIPE_TABLE = "recipe";
	private static final String RECPE_INGREDIENT = "recipe_ingredient";
	private static final String STEP_TABLE = "step";
	private static final String UNIT_TABLE = "unit";

	public Recipe insertRecipe(Recipe recipe) {
		// @formatter:off
		String sql = "" + "INSERT INTO " + RECIPE_TABLE + " "
			+ "(recipe_name, notes, num_servings, prep_time, cook_time) "
			+ "VALUES"
			+ "(?, ?, ?, ?, ?)";
		// @formatter:on	

	try(Connection conn = DbConnection.getConnection()) {
		startTransaction(conn);
		
		try(PreparedStatement stmt = conn.prepareStatement(sql)) {
			setParameter(stmt, 1, recipe.getRecipeName(), String.class);
			setParameter(stmt, 2, recipe.getNotes(), String.class);
			setParameter(stmt, 3, recipe.getNumServings(), Integer.class);
			setParameter(stmt, 4, recipe.getPrepTime(), LocalTime.class);
			setParameter(stmt, 5, recipe.getCookTime(), LocalTime.class);	
			
			stmt.executeUpdate();
			// fetch autogenerated recipe_id
			Integer recipeId = getLastInsertId(conn, RECIPE_TABLE);
			
			commitTransaction(conn);
			
			recipe.setRecipeId(recipeId);
			return recipe;
		}
		catch(Exception e) {
			rollbackTransaction(conn);
			throw new DbException(e);
		}
	}
	catch (SQLException e) {
		throw new DbException(e);		
	}
	} // end insertRecipe

	public void executeBatch(List<String> sqlBatch) {
		try (Connection conn = DbConnection.getConnection()) {
			startTransaction(conn);

			try (Statement stmt = conn.createStatement()) {
				for (String sql : sqlBatch) {
					stmt.addBatch(sql);
				}
				stmt.executeBatch();
				commitTransaction(conn);
			} catch (Exception e) {
				rollbackTransaction(conn);
				throw new DbException();
			}
		} catch (SQLException e) {
			throw new DbException(e);
		}
	}

} // end CLASS
